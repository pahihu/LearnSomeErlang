-module(teeth).
-export([alert/1, test/0]).

pocket_depths() ->
   [[0], [2,2,1,2,2,1], [3,1,2,3,2,3],
    [3,1,3,2,1,2], [3,2,3,2,2,1], [2,3,1,2,1,1],
    [3,1,3,2,3,2], [3,3,2,1,3,1], [4,3,3,2,3,3],
    [3,1,1,3,2,2], [4,3,4,3,2,3], [2,3,1,3,2,2],
    [1,2,1,1,3,2], [1,2,2,3,2,3], [1,3,2,1,3,3], [0],
    [3,2,3,1,1,2], [2,2,1,1,3,2], [2,1,1,1,1,2],
    [3,3,2,1,1,3], [3,1,3,2,3,2], [3,3,1,2,3,3],
    [1,2,2,3,3,3], [2,2,3,2,3,3], [2,2,2,4,3,4],
    [3,4,3,3,3,4], [1,1,2,3,1,2], [2,2,3,2,1,3],
    [3,4,2,4,4,3], [3,3,2,1,2,3], [2,2,2,2,3,3],
    [3,2,3,2,3,2]].

alert([], _, Attention) ->
   lists:reverse(Attention);
alert([H|T], N, Attention) ->
   AnyOverThree = 3 < lists:max(H),
   if
      AnyOverThree ->
         alert(T, N+1, [N|Attention]);
      true ->
         alert(T, N+1, Attention)
   end.

alert(L) ->
   alert(L, 1, []).

test() ->
   alert(pocket_depths()).
